// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int            @id @default(autoincrement())
  uid            String         @unique
  nombreUsuario  String         @map("nombre_usuario")
  nombreCompleto String?        @map("nombre_completo")
  email          String         @unique
  fechaRegistro  DateTime       @default(now()) @map("fecha_registro")
  avatarUrl      String?        @map("avatar_url")
  coverUrl       String?        @map("img_cover_url")
  sexo           Boolean?       
  fechaNacimiento String?
  carrera        String?
  siguiendo      Int            @default(0)
  seguidores     Int            @default(0)
  usuarioEspecial Boolean       @map("usuario_especial") @default(false)
  publicaciones  Publicacion[]
  interacciones  Interaccion[]
  seguidos       Seguidor[]     @relation("Seguidos")
  seguidoresList Seguidor[]     @relation("Seguidores")
  comentarios    Comentario[]
  encuesta       Encuesta?
}

model Publicacion {
  id               Int            @id @default(autoincrement())
  usuarioId        Int            @map("usuario_id")
  contenido        String         @default("")
  emocion          String         @default("")
  fechaPublicacion DateTime       @default(now()) @map("fecha_publicacion")
  likes            Int            @default(0)
  reposts          Int            @default(0)
  alertas          Int            @default(0)
  nivelVacio       String         @map("nivel_vacio") @default("")
  usuario          Usuario        @relation(fields: [usuarioId], references: [id])
  interacciones    Interaccion[]
  comentarios Comentario[]
}

model Interaccion {
  id               Int       @id @default(autoincrement())
  usuarioId        Int       @map("usuario_id")
  publicacionId    Int       @map("publicacion_id")
  tipoInteraccion  String    @map("tipo_interaccion")
  fechaInteraccion DateTime  @default(now()) @map("fecha_interaccion")
  usuario          Usuario   @relation(fields: [usuarioId], references: [id])
  publicacion      Publicacion @relation(fields: [publicacionId], references: [id], onDelete: Cascade)
}

model Comentario {
  id               Int         @id @default(autoincrement())
  usuarioId        Int         @map("usuario_id")
  publicacionId    Int         @map("publicacion_id")
  contenido        String
  fechaComentario  DateTime    @default(now()) @map("fecha_comentario")
  usuario          Usuario     @relation(fields: [usuarioId], references: [id])
  publicacion      Publicacion @relation(fields: [publicacionId], references: [id], onDelete: Cascade)
}

model Seguidor {
  id               Int          @id @default(autoincrement())
  seguidorUid      String       @map("seguidor_uid")
  seguidoUid       String       @map("seguido_uid")
  fechaSeguimiento DateTime     @default(now()) @map("fecha_seguimiento")
  seguidor         Usuario      @relation("Seguidos", fields: [seguidorUid], references: [uid])
  seguido          Usuario      @relation("Seguidores", fields: [seguidoUid], references: [uid])

  @@unique(name: "seguidorUid_seguidoUid", [seguidorUid, seguidoUid])
}

model Encuesta {
  id                  Int         @id @default(autoincrement())
  usuarioId           Int         @unique @map("usuario_id")
  fecha               DateTime    @default(now()) @map("fecha_encuesta")
  puntajeDesesperanza Int
  riesgoAlto          Boolean
  usuario             Usuario     @relation(fields: [usuarioId], references: [id])
  respuestas          Respuesta[]  
}

model Respuesta {
  id         Int       @id @default(autoincrement()) 
  encuestaId Int       
  pregunta   String    // Nombre de la pregunta (ej. "Logo_S1_R1_Val", "Desesp_R3")
  respuesta  String    // Respuesta seleccionada por el usuario
  encuesta   Encuesta  @relation(fields: [encuestaId], references: [id], onDelete: Cascade)
}